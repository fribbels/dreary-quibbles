import{T as s,S as l,A as E,a as g}from"./index-uKR0oAWy.js";import{s as G,a as F}from"./conditionalFinalizers-ChaoxVFF.js";import"./vendor-PqicMVLa.js";const x=(e,m)=>{const n=s.wrappedFixedT(m).get(null,"conditionals","Characters.TrailblazerPreservation"),{basic:o,skill:T,ult:S,talent:f}=g.SKILL_TALENT_3_ULT_BASIC_5,{SOURCE_BASIC:c,SOURCE_SKILL:h,SOURCE_ULT:D,SOURCE_TALENT:A,SOURCE_TECHNIQUE:M,SOURCE_TRACE:r,SOURCE_MEMO:z,SOURCE_E1:K,SOURCE_E2:y,SOURCE_E4:H,SOURCE_E6:b}=l.character("8004"),u=T(e,.5,.52),I=o(e,1,1.1),L=e>=1?.25:0,d=o(e,1.35,1.463),k=e>=1?.5:0,U=S(e,1,1.1),v=S(e,1.5,1.65),O=f(e,.06,.064),R=f(e,80,89),p={enhancedBasic:!0,skillActive:!0,shieldActive:!0,e6DefStacks:3},N={skillActive:!0},C={enhancedBasic:{id:"enhancedBasic",formItem:"switch",text:n("Content.enhancedBasic.text"),content:n("Content.enhancedBasic.content",{basicEnhancedAtkScaling:s.precisionRound(100*d)})},skillActive:{id:"skillActive",formItem:"switch",text:n("Content.skillActive.text"),content:n("Content.skillActive.content",{skillDamageReductionValue:s.precisionRound(100*u)})},shieldActive:{id:"shieldActive",formItem:"switch",text:n("Content.shieldActive.text"),content:n("Content.shieldActive.content")},e6DefStacks:{id:"e6DefStacks",formItem:"slider",text:n("Content.e6DefStacks.text"),content:n("Content.e6DefStacks.content"),min:0,max:3,disabled:e<6}},B={skillActive:C.skillActive};return{activeAbilities:[E.BASIC,E.ULT],content:()=>Object.values(C),teammateContent:()=>Object.values(B),defaults:()=>p,teammateDefaults:()=>N,precomputeEffects:(t,a,_)=>{const i=a.characterConditionals;return t.DEF_P.buff(e>=6?i.e6DefStacks*.1:0,b),t.ATK_P.buff(i.shieldActive?.15:0,r),i.enhancedBasic?(t.BASIC_ATK_SCALING.buff(d,c),t.BASIC_DEF_SCALING.buff(k,c)):(t.BASIC_ATK_SCALING.buff(I,c),t.BASIC_DEF_SCALING.buff(L,c)),t.ULT_ATK_SCALING.buff(U,l.NONE),t.ULT_DEF_SCALING.buff(v,l.NONE),t.DMG_RED_MULTI.multiply(i.skillActive?1-u:1,h),t.BASIC_TOUGHNESS_DMG.buff(i.enhancedBasic?20:10,c),t.ULT_TOUGHNESS_DMG.buff(20,D),t.SHIELD_SCALING.buff(O,A),t.SHIELD_FLAT.buff(R,A),t},precomputeMutualEffects:(t,a,_)=>{const i=a.characterConditionals;t.DMG_RED_MULTI.multiplyTeam(i.skillActive?1-.15:1,r)},finalizeCalculations:(t,a,_)=>{G(t)},gpuFinalizeCalculations:(t,a)=>F()}};export{x as default};
