import{T as f,S as L,A as g,E as p,t as V,C as v,h as y,i as u,j as F,k as q,w as x,a as w}from"./baseOptimizerWorker-D9p07sLo.js";var z=(n,T)=>{const i=f.wrappedFixedT(T).get(null,"conditionals","Characters.Sparkle"),{basic:A,skill:B,ult:_,talent:h}=w.SKILL_BASIC_3_ULT_TALENT_5,{SOURCE_BASIC:d,SOURCE_SKILL:s,SOURCE_ULT:K,SOURCE_TALENT:D,SOURCE_TECHNIQUE:M,SOURCE_TRACE:S,SOURCE_MEMO:G,SOURCE_E1:U,SOURCE_E2:b,SOURCE_E4:P,SOURCE_E6:Q}=L.character("1306"),o=B(n,.24,.264),c=B(n,.45,.486),k=_(n,.1,.108),r=h(n,.06,.066),O=A(n,1,1.1),R={0:0,1:.05,2:.15,3:.3,4:.3},E={skillCdBuff:!1,cipherBuff:!0,talentStacks:3,quantumAlliesAtkBuff:!0},I={...E,skillCdBuff:!0,teammateCDValue:2.5},C={skillCdBuff:{id:"skillCdBuff",formItem:"switch",text:i("Content.skillCdBuff.text"),content:i("Content.skillCdBuff.content",{skillCdBuffScaling:f.precisionRound(100*o),skillCdBuffBase:f.precisionRound(100*c)})},cipherBuff:{id:"cipherBuff",formItem:"switch",text:i("Content.cipherBuff.text"),content:i("Content.cipherBuff.content",{cipherTalentStackBoost:f.precisionRound(100*k)})},talentStacks:{id:"talentStacks",formItem:"slider",text:i("Content.talentStacks.text"),content:i("Content.talentStacks.content",{talentBaseStackBoost:f.precisionRound(100*r)}),min:0,max:3},quantumAlliesAtkBuff:{id:"quantumAlliesAtkBuff",formItem:"switch",text:i("Content.quantumAlliesAtkBuff.text"),content:i("Content.quantumAlliesAtkBuff.content")}},N={skillCdBuff:C.skillCdBuff,teammateCDValue:{id:"teammateCDValue",formItem:"slider",text:i("TeammateContent.teammateCDValue.text"),content:i("TeammateContent.teammateCDValue.content",{skillCdBuffScaling:f.precisionRound(100*o),skillCdBuffBase:f.precisionRound(100*c)}),min:0,max:3.5,percent:!0},cipherBuff:C.cipherBuff,talentStacks:C.talentStacks,quantumAlliesAtkBuff:C.quantumAlliesAtkBuff};return{activeAbilities:[g.BASIC],content:()=>Object.values(C),teammateContent:()=>Object.values(N),defaults:()=>E,teammateDefaults:()=>I,precomputeEffects:(t,a,l)=>{const e=a.characterConditionals;t.BASIC_ATK_SCALING.buff(O,d),t.BASIC_TOUGHNESS_DMG.buff(10,d),e.skillCdBuff&&(t.CD.buff(c,s),t.UNCONVERTIBLE_CD_BUFF.buff(c,s))},precomputeMutualEffects:(t,a,l)=>{const e=a.characterConditionals;t.ATK_P.buffTeam(.15,S),t.ATK_P.buffDual(l.element==p.Quantum&&e.quantumAlliesAtkBuff?R[V(l,p.Quantum)]:0,S),t.ATK_P.buffTeam(n>=1&&e.cipherBuff?.4:0,U),t.ELEMENTAL_DMG.buffTeam(e.cipherBuff?e.talentStacks*(r+k):e.talentStacks*r,D),t.DEF_PEN.buffTeam(n>=2?.08*e.talentStacks:0,b)},precomputeTeammateEffects:(t,a,l)=>{const e=a.characterConditionals,m=e.skillCdBuff?c+(o+(n>=6?.3:0))*e.teammateCDValue:0;n>=6?(t.CD.buffTeam(m,s),t.UNCONVERTIBLE_CD_BUFF.buffTeam(m,s)):(t.CD.buffSingle(m,s),t.UNCONVERTIBLE_CD_BUFF.buffSingle(m,s))},finalizeCalculations:t=>{},gpuFinalizeCalculations:()=>"",dynamicConditionals:[{id:"SparkleCdConditional",type:v.ABILITY,activation:y.CONTINUOUS,dependsOn:[u.CD],chainsTo:[u.CD],condition:function(t,a,l){return a.characterConditionals.skillCdBuff},effect:function(t,a,l){F(u.CD,u.CD,this,t,a,l,s,e=>e*(o+(n>=6?.3:0)))},gpu:function(t,a){const l=t.characterConditionals;return q(u.CD,u.CD,this,t,a,`${o+(n>=6?.3:0)} * convertibleValue`,`${x(l.skillCdBuff)}`)}}]}};export{z as default};
